{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "07ed1481",
   "metadata": {},
   "source": [
    "# Discussion of the GP marginal likelihood upper bound\n",
    "\n",
    "See the [`gp_upper` repository](https://github.com/markvdw/gp_upper) by Mark van der Wilk for code to tighten the upper bound through optimization, and a more comprehensive discussion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8e9594f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:04.936269Z",
     "iopub.status.busy": "2022-05-16T10:36:04.935970Z",
     "iopub.status.idle": "2022-05-16T10:36:08.049322Z",
     "shell.execute_reply": "2022-05-16T10:36:08.048635Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-16 10:36:05.902674: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-05-16 10:36:05.902703: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline\n",
    "plt.rcParams[\"figure.figsize\"] = (12, 6)\n",
    "\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow import set_trainable\n",
    "from gpflow.utilities import print_summary\n",
    "from gpflow.ci_utils import ci_niter\n",
    "\n",
    "import logging\n",
    "\n",
    "logging.disable(logging.WARNING)\n",
    "\n",
    "np.random.seed(1)\n",
    "\n",
    "from FITCvsVFE import getTrainingTestData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "69610058",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:08.051940Z",
     "iopub.status.busy": "2022-05-16T10:36:08.051699Z",
     "iopub.status.idle": "2022-05-16T10:36:08.056265Z",
     "shell.execute_reply": "2022-05-16T10:36:08.055665Z"
    }
   },
   "outputs": [],
   "source": [
    "X, Y, Xt, Yt = getTrainingTestData()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9246f0e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:08.058830Z",
     "iopub.status.busy": "2022-05-16T10:36:08.058597Z",
     "iopub.status.idle": "2022-05-16T10:36:08.064478Z",
     "shell.execute_reply": "2022-05-16T10:36:08.063845Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_model(m, name=\"\"):\n",
    "    pX = np.linspace(-3, 9, 100)[:, None]\n",
    "    pY, pYv = m.predict_y(pX)\n",
    "    plt.plot(X, Y, \"x\")\n",
    "    plt.plot(pX, pY)\n",
    "    if not isinstance(m, gpflow.models.GPR):\n",
    "        Z = m.inducing_variable.Z.numpy()\n",
    "        plt.plot(Z, np.zeros_like(Z), \"o\")\n",
    "    two_sigma = (2.0 * pYv ** 0.5)[:, 0]\n",
    "    plt.fill_between(pX[:, 0], pY[:, 0] - two_sigma, pY[:, 0] + two_sigma, alpha=0.15)\n",
    "    lml = m.maximum_log_likelihood_objective().numpy()\n",
    "    plt.title(\"%s (lml = %f)\" % (name, lml))\n",
    "    return lml"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b22682d",
   "metadata": {},
   "source": [
    "## Full model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6746a889",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:08.066873Z",
     "iopub.status.busy": "2022-05-16T10:36:08.066656Z",
     "iopub.status.idle": "2022-05-16T10:36:11.009495Z",
     "shell.execute_reply": "2022-05-16T10:36:11.008999Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-16 10:36:08.068933: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-05-16 10:36:08.068960: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-05-16 10:36:08.068979: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (e36ca1228ba7): /proc/driver/nvidia/version does not exist\n",
      "2022-05-16 10:36:08.069248: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-05-16 10:36:08.103653: W tensorflow/python/util/util.cc:368] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: AutoGraph could not transform <bound method ShapeChecker.check_shapes of <gpflow.experimental.check_shapes.checker.ShapeChecker object at 0x7fa6ff64eb60>> and will run it as-is.\n",
      "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
      "Cause: annotated name 'shape' can't be nonlocal (__autograph_generated_file5xc88rhf.py, line 99)\n",
      "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gpr = gpflow.models.GPR((X, Y), gpflow.kernels.SquaredExponential())\n",
    "gpflow.optimizers.Scipy().minimize(\n",
    "    gpr.training_loss, gpr.trainable_variables, options=dict(maxiter=ci_niter(1000))\n",
    ")\n",
    "full_lml = plot_model(gpr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72cdda1b",
   "metadata": {},
   "source": [
    "## Upper bounds for sparse variational models\n",
    "As a first investigation, we compute the upper bound for models trained using the sparse variational GP approximation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "59f8b9fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:11.012124Z",
     "iopub.status.busy": "2022-05-16T10:36:11.011893Z",
     "iopub.status.idle": "2022-05-16T10:36:25.944714Z",
     "shell.execute_reply": "2022-05-16T10:36:25.944046Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/optimizers/scipy.py:94: OptimizeWarning: Unknown solver options: compile\n",
      "  return scipy.optimize.minimize(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19 "
     ]
    }
   ],
   "source": [
    "Ms = np.arange(4, ci_niter(20, test_n=6), 1)\n",
    "vfe_lml = []\n",
    "vupper_lml = []\n",
    "vfe_hyps = []\n",
    "for M in Ms:\n",
    "    Zinit = X[:M, :].copy()\n",
    "    vfe = gpflow.models.SGPR((X, Y), gpflow.kernels.SquaredExponential(), inducing_variable=Zinit)\n",
    "    gpflow.optimizers.Scipy().minimize(\n",
    "        vfe.training_loss,\n",
    "        vfe.trainable_variables,\n",
    "        options=dict(disp=False, maxiter=ci_niter(1000), compile=True),\n",
    "    )\n",
    "\n",
    "    vfe_lml.append(vfe.elbo().numpy())\n",
    "    vupper_lml.append(vfe.upper_bound().numpy())\n",
    "    vfe_hyps.append([(p.name, p.numpy()) for p in vfe.trainable_parameters])\n",
    "    print(\"%i\" % M, end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f246cf04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:25.948376Z",
     "iopub.status.busy": "2022-05-16T10:36:25.948099Z",
     "iopub.status.idle": "2022-05-16T10:36:26.100788Z",
     "shell.execute_reply": "2022-05-16T10:36:26.100278Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"LML bounds for models trained with SGPR\")\n",
    "plt.plot(Ms, vfe_lml, label=\"lower\")\n",
    "plt.plot(Ms, vupper_lml, label=\"upper\")\n",
    "plt.axhline(full_lml, label=\"full\", alpha=0.3)\n",
    "plt.xlabel(\"Number of inducing points\")\n",
    "plt.ylabel(\"LML estimate\")\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "600e2c78",
   "metadata": {},
   "source": [
    "We see that the lower bound increases as more inducing points are added. Note that the upper bound does _not_ monotonically decrease! This is because as we train the sparse model, we also get better estimates of the hyperparameters. The upper bound will be different for this different setting of the hyperparameters, and is sometimes looser. The upper bound also converges to the true lml slower than the lower bound."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08a00db0",
   "metadata": {},
   "source": [
    "### Upper bounds for fixed hyperparameters\n",
    "Here, we train sparse models with the hyperparameters fixed to the optimal value found previously."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "61e7b784",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:26.103415Z",
     "iopub.status.busy": "2022-05-16T10:36:26.103171Z",
     "iopub.status.idle": "2022-05-16T10:36:35.972236Z",
     "shell.execute_reply": "2022-05-16T10:36:35.971618Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19 "
     ]
    }
   ],
   "source": [
    "fMs = np.arange(3, ci_niter(20, test_n=5), 1)\n",
    "fvfe_lml = []  # Fixed vfe lml\n",
    "fvupper_lml = []  # Fixed upper lml\n",
    "\n",
    "init_params = gpflow.utilities.parameter_dict(vfe)\n",
    "\n",
    "# cannot copy this due to shape mismatch with different numbers of inducing points between models:\n",
    "del init_params[\".inducing_variable.Z\"]\n",
    "\n",
    "for M in fMs:\n",
    "    Zinit = vfe.inducing_variable.Z.numpy()[:M, :]\n",
    "    Zinit = np.vstack((Zinit, X[np.random.permutation(len(X))[: (M - len(Zinit))], :].copy()))\n",
    "\n",
    "    vfe = gpflow.models.SGPR((X, Y), gpflow.kernels.SquaredExponential(), inducing_variable=Zinit)\n",
    "\n",
    "    # copy hyperparameters (omitting inducing_variable.Z) from optimized model:\n",
    "    gpflow.utilities.multiple_assign(vfe, init_params)\n",
    "\n",
    "    set_trainable(vfe.kernel, False)\n",
    "    set_trainable(vfe.likelihood, False)\n",
    "\n",
    "    gpflow.optimizers.Scipy().minimize(\n",
    "        vfe.training_loss,\n",
    "        vfe.trainable_variables,\n",
    "        options=dict(disp=False, maxiter=ci_niter(1000)),\n",
    "        compile=True,\n",
    "    )\n",
    "\n",
    "    fvfe_lml.append(vfe.elbo().numpy())\n",
    "    fvupper_lml.append(vfe.upper_bound().numpy())\n",
    "    print(\"%i\" % M, end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ff1e714d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:35.974860Z",
     "iopub.status.busy": "2022-05-16T10:36:35.974587Z",
     "iopub.status.idle": "2022-05-16T10:36:36.114181Z",
     "shell.execute_reply": "2022-05-16T10:36:36.113611Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(fMs, fvfe_lml, label=\"lower\")\n",
    "plt.plot(fMs, fvupper_lml, label=\"upper\")\n",
    "plt.axhline(full_lml, label=\"full\", alpha=0.3)\n",
    "plt.xlabel(\"Number of inducing points\")\n",
    "plt.ylabel(\"LML estimate\")\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "da0e08da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:36.116445Z",
     "iopub.status.busy": "2022-05-16T10:36:36.116227Z",
     "iopub.status.idle": "2022-05-16T10:36:36.119382Z",
     "shell.execute_reply": "2022-05-16T10:36:36.118954Z"
    }
   },
   "outputs": [],
   "source": [
    "assert np.all(np.array(fvupper_lml) - np.array(fvfe_lml) > 0.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78578850",
   "metadata": {},
   "source": [
    "Now, as the hyperparameters are fixed, the bound _does_ monotonically decrease. We chose the optimal hyperparameters here, but the picture should be the same for any hyperparameter setting. This shows that we increasingly get a better estimate of the marginal likelihood as we add more inducing points."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c66994da",
   "metadata": {},
   "source": [
    "### A tight estimate bound does not imply a converged model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9da2c5fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:36.121556Z",
     "iopub.status.busy": "2022-05-16T10:36:36.121342Z",
     "iopub.status.idle": "2022-05-16T10:36:37.286024Z",
     "shell.execute_reply": "2022-05-16T10:36:37.285441Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lower bound: -62.487144\n",
      "Upper bound: -62.481711\n"
     ]
    }
   ],
   "source": [
    "single_inducing_point = X[:1, :].copy()\n",
    "vfe = gpflow.models.SGPR(\n",
    "    (X, Y), gpflow.kernels.SquaredExponential(), inducing_variable=single_inducing_point\n",
    ")\n",
    "objective = tf.function(vfe.training_loss)\n",
    "gpflow.optimizers.Scipy().minimize(\n",
    "    objective, vfe.trainable_variables, options=dict(maxiter=ci_niter(1000)), compile=False\n",
    ")\n",
    "# Note that we need to set compile=False here due to a discrepancy in compiling with tf.function\n",
    "# see https://github.com/GPflow/GPflow/issues/1260\n",
    "\n",
    "print(\"Lower bound: %f\" % vfe.elbo().numpy())\n",
    "print(\"Upper bound: %f\" % vfe.upper_bound().numpy())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2367347",
   "metadata": {},
   "source": [
    "In this case we show that for the hyperparameter setting, the bound is very tight. However, this does _not_ imply that we have enough inducing points, but simply that we have correctly identified the marginal likelihood for this particular hyperparameter setting. In this specific case, where we used a single inducing point, the model collapses to not using the GP at all (lengthscale is really long to model only the mean). The rest of the variance is explained by noise. This GP can be perfectly approximated with a single inducing point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "21215e03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:37.288317Z",
     "iopub.status.busy": "2022-05-16T10:36:37.288082Z",
     "iopub.status.idle": "2022-05-16T10:36:37.496509Z",
     "shell.execute_reply": "2022-05-16T10:36:37.495880Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-62.48714439080655"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(vfe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ed442bb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-16T10:36:37.499801Z",
     "iopub.status.busy": "2022-05-16T10:36:37.499551Z",
     "iopub.status.idle": "2022-05-16T10:36:37.509341Z",
     "shell.execute_reply": "2022-05-16T10:36:37.508883Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                    </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value              </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SGPR.kernel.variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.10773340102049112</td></tr>\n",
       "<tr><td>SGPR.kernel.lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>17462.63953552937  </td></tr>\n",
       "<tr><td>SGPR.likelihood.variance</td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.6824642095450356 </td></tr>\n",
       "<tr><td>SGPR.inducing_variable.Z</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(1, 1) </td><td>float64</td><td>[[-71.13423773]]   </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(vfe, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bc994a3",
   "metadata": {},
   "source": [
    "This can be diagnosed by showing that there are other hyperparameter settings with higher upper bounds. This indicates that there might be better hyperparameter settings, but we cannot identify them due to the lack of inducing points. An example of this can be seen in the previous section."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

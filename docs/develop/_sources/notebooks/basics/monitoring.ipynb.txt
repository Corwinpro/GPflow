{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "10aaad82",
   "metadata": {},
   "source": [
    "# Monitoring Optimisation\n",
    "\n",
    "In this notebook we cover how to monitor the model and certain metrics during optimisation.\n",
    "\n",
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2dd53ee6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:34.151525Z",
     "iopub.status.busy": "2022-04-25T10:35:34.151179Z",
     "iopub.status.idle": "2022-04-25T10:35:37.280904Z",
     "shell.execute_reply": "2022-04-25T10:35:37.280400Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-04-25 10:35:35.136155: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-04-25 10:35:35.136185: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import ci_niter\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ee45100",
   "metadata": {},
   "source": [
    "The monitoring functionality lives in `gpflow.monitor`.\n",
    "For now, we import `ModelToTensorBoard`, `ImageToTensorBoard`, `ScalarToTensorBoard` monitoring tasks and `MonitorTaskGroup` and `Monitor`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "866ad844",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:37.283695Z",
     "iopub.status.busy": "2022-04-25T10:35:37.283475Z",
     "iopub.status.idle": "2022-04-25T10:35:37.286196Z",
     "shell.execute_reply": "2022-04-25T10:35:37.285778Z"
    }
   },
   "outputs": [],
   "source": [
    "from gpflow.monitor import (\n",
    "    ImageToTensorBoard,\n",
    "    ModelToTensorBoard,\n",
    "    Monitor,\n",
    "    MonitorTaskGroup,\n",
    "    ScalarToTensorBoard,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1408b680",
   "metadata": {},
   "source": [
    "## Set up data and model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40219194",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:37.288367Z",
     "iopub.status.busy": "2022-04-25T10:35:37.288164Z",
     "iopub.status.idle": "2022-04-25T10:35:37.290771Z",
     "shell.execute_reply": "2022-04-25T10:35:37.290367Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define some configuration constants.\n",
    "\n",
    "num_data = 100\n",
    "noise_std = 0.1\n",
    "optimisation_steps = ci_niter(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d2e28efc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:37.292742Z",
     "iopub.status.busy": "2022-04-25T10:35:37.292558Z",
     "iopub.status.idle": "2022-04-25T10:35:37.437532Z",
     "shell.execute_reply": "2022-04-25T10:35:37.437094Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f6c4fd79150>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dummy data.\n",
    "\n",
    "X = np.random.randn(num_data, 1)  # [N, 2]\n",
    "Y = np.sin(X) + 0.5 * np.cos(X) + np.random.randn(*X.shape) * noise_std  # [N, 1]\n",
    "plt.plot(X, Y, \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "805ce0cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:37.439838Z",
     "iopub.status.busy": "2022-04-25T10:35:37.439601Z",
     "iopub.status.idle": "2022-04-25T10:35:37.489438Z",
     "shell.execute_reply": "2022-04-25T10:35:37.488954Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-04-25 10:35:37.442015: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-04-25 10:35:37.442046: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-04-25 10:35:37.442067: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (950344f95826): /proc/driver/nvidia/version does not exist\n",
      "2022-04-25 10:35:37.442352: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "&lt;gpflow.models.gpr.GPR object at 0x7f6c4dbbc580&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value               </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)   </td><td>float64</td><td>[1. 2.]             </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.009999999999999998</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<gpflow.models.gpr.GPR object at 0x7f6c4dbbc580>\n",
       "╒════════════════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤══════════════════════╕\n",
       "│ name                               │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │ value                │\n",
       "╞════════════════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪══════════════════════╡\n",
       "│ GPR.kernel.kernels[0].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[0].lengthscales │ Parameter │ Softplus         │         │ True        │ (2,)    │ float64 │ [1. 2.]              │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[1].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.likelihood.variance            │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.009999999999999998 │\n",
       "╘════════════════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧══════════════════════╛"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up model and print\n",
    "\n",
    "kernel = gpflow.kernels.SquaredExponential(lengthscales=[1.0, 2.0]) + gpflow.kernels.Linear()\n",
    "model = gpflow.models.GPR((X, Y), kernel, noise_variance=noise_std ** 2)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "29611d61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:37.491856Z",
     "iopub.status.busy": "2022-04-25T10:35:37.491645Z",
     "iopub.status.idle": "2022-04-25T10:35:37.649946Z",
     "shell.execute_reply": "2022-04-25T10:35:37.649467Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We define a function that plots the model's prediction (in the form of samples) together with the data.\n",
    "# Importantly, this function has no other argument than `fig: matplotlib.figure.Figure` and `ax: matplotlib.figure.Axes`.\n",
    "\n",
    "\n",
    "def plot_prediction(fig, ax):\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100).reshape(-1, 1)\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=20)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C1\", alpha=0.2)\n",
    "    ax.plot(X, Y, \"o\")\n",
    "\n",
    "\n",
    "# Let's check if the function does the desired plotting\n",
    "fig = plt.figure()\n",
    "ax = fig.subplots()\n",
    "plot_prediction(fig, ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bff2fcca",
   "metadata": {},
   "source": [
    "## Set up monitoring tasks\n",
    "\n",
    "We now define the `MonitorTask`s that will be executed during the optimisation.\n",
    "For this tutorial we set up three tasks:\n",
    "- `ModelToTensorBoard`: writes the models hyper-parameters such as `likelihood.variance` and `kernel.lengthscales` to a TensorBoard.\n",
    "- `ImageToTensorBoard`: writes custom matplotlib images to a TensorBoard.\n",
    "- `ScalarToTensorBoard`: writes any scalar value to a TensorBoard. Here, we use it to write the model's training objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0304c76f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:37.652411Z",
     "iopub.status.busy": "2022-04-25T10:35:37.652171Z",
     "iopub.status.idle": "2022-04-25T10:35:37.668961Z",
     "shell.execute_reply": "2022-04-25T10:35:37.668297Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs\"  # Directory where TensorBoard files will be written.\n",
    "model_task = ModelToTensorBoard(log_dir, model)\n",
    "image_task = ImageToTensorBoard(log_dir, plot_prediction, \"image_samples\")\n",
    "lml_task = ScalarToTensorBoard(log_dir, lambda: model.training_loss(), \"training_objective\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "832fbde0",
   "metadata": {},
   "source": [
    "We now group the tasks in a set of fast and slow tasks and pass them to the monitor.\n",
    "This allows us to execute the groups at a different frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e57fb4cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:37.671620Z",
     "iopub.status.busy": "2022-04-25T10:35:37.671407Z",
     "iopub.status.idle": "2022-04-25T10:35:37.674969Z",
     "shell.execute_reply": "2022-04-25T10:35:37.674412Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Plotting tasks can be quite slow. We want to run them less frequently.\n",
    "# We group them in a `MonitorTaskGroup` and set the period to 5.\n",
    "slow_tasks = MonitorTaskGroup(image_task, period=5)\n",
    "\n",
    "# The other tasks are fast. We run them at each iteration of the optimisation.\n",
    "fast_tasks = MonitorTaskGroup([model_task, lml_task], period=1)\n",
    "\n",
    "# Both groups are passed to the monitor.\n",
    "# `slow_tasks` will be run five times less frequently than `fast_tasks`.\n",
    "monitor = Monitor(fast_tasks, slow_tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f634a5bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:37.677243Z",
     "iopub.status.busy": "2022-04-25T10:35:37.677061Z",
     "iopub.status.idle": "2022-04-25T10:35:44.315378Z",
     "shell.execute_reply": "2022-04-25T10:35:44.314712Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-04-25 10:35:37.681921: W tensorflow/python/util/util.cc:368] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.\n"
     ]
    }
   ],
   "source": [
    "training_loss = model.training_loss_closure(\n",
    "    compile=True\n",
    ")  # compile=True (default): compiles using tf.function\n",
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "for step in range(optimisation_steps):\n",
    "    opt.minimize(training_loss, model.trainable_variables)\n",
    "    monitor(step)  # <-- run the monitoring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fdc3ba1",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "TensorBoard is accessible through the browser, after launching the server by running `tensorboard --logdir ${logdir}`.\n",
    "See the [TensorFlow documentation on TensorBoard](https://www.tensorflow.org/tensorboard/get_started) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42f66208",
   "metadata": {},
   "source": [
    "### For optimal performance, we can also wrap the monitor call inside `tf.function`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8bb7f379",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:44.318370Z",
     "iopub.status.busy": "2022-04-25T10:35:44.318053Z",
     "iopub.status.idle": "2022-04-25T10:35:44.323995Z",
     "shell.execute_reply": "2022-04-25T10:35:44.323536Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "log_dir_compiled = f\"{log_dir}/compiled\"\n",
    "model_task = ModelToTensorBoard(log_dir_compiled, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_compiled, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "# Note that the `ImageToTensorBoard` task cannot be compiled, and is omitted from the monitoring\n",
    "monitor = Monitor(MonitorTaskGroup([model_task, lml_task]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbf9295d",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In the optimisation loop below we use `tf.range` (rather than Python's built-in range) to avoid re-tracing the `step` function each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5c4dd255",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:44.326340Z",
     "iopub.status.busy": "2022-04-25T10:35:44.326106Z",
     "iopub.status.idle": "2022-04-25T10:35:46.694779Z",
     "shell.execute_reply": "2022-04-25T10:35:46.694222Z"
    }
   },
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def step(i):\n",
    "    opt.minimize(model.training_loss, model.trainable_variables)\n",
    "    monitor(i)\n",
    "\n",
    "\n",
    "# Notice the tf.range\n",
    "for i in tf.range(optimisation_steps):\n",
    "    step(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61fd65da",
   "metadata": {},
   "source": [
    "When opening TensorBoard, you may need to use the command `tensorboard --logdir . --reload_multifile=true`, as multiple `FileWriter` objects are used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e425eb8",
   "metadata": {},
   "source": [
    "### Scipy Optimization monitoring\n",
    "\n",
    "Note that if you want to use the `Scipy` optimizer provided by GPflow, and want to monitor the training progress, then you need to simply replace\n",
    "the optimization loop with a single call to its `minimize` method and pass in the monitor as a `step_callback` keyword argument:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1cd69fd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:46.698050Z",
     "iopub.status.busy": "2022-04-25T10:35:46.697834Z",
     "iopub.status.idle": "2022-04-25T10:35:46.716287Z",
     "shell.execute_reply": "2022-04-25T10:35:46.715732Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "\n",
    "log_dir_scipy = f\"{log_dir}/scipy\"\n",
    "model_task = ModelToTensorBoard(log_dir_scipy, model)\n",
    "lml_task = ScalarToTensorBoard(log_dir_scipy, lambda: model.training_loss(), \"training_objective\")\n",
    "image_task = ImageToTensorBoard(log_dir_scipy, plot_prediction, \"image_samples\")\n",
    "\n",
    "monitor = Monitor(\n",
    "    MonitorTaskGroup([model_task, lml_task], period=1), MonitorTaskGroup(image_task, period=5)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e5dd2652",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-25T10:35:46.719919Z",
     "iopub.status.busy": "2022-04-25T10:35:46.719690Z",
     "iopub.status.idle": "2022-04-25T10:35:48.788786Z",
     "shell.execute_reply": "2022-04-25T10:35:48.788320Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: -69.68099880889753\n",
       " hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-2.96735825e-04, -4.30340661e-04,  3.97830673e-04,  2.26009904e-06,\n",
       "        4.29147152e-04])\n",
       "  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
       "     nfev: 37\n",
       "      nit: 28\n",
       "     njev: 37\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  2.07005977,   1.74612938,   0.18194306, -15.21875411,\n",
       "        -4.53840856])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt.minimize(training_loss, model.trainable_variables, step_callback=monitor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02222de2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

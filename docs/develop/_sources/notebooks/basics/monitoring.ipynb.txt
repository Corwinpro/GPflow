{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f9d1710f",
   "metadata": {},
   "source": [
    "# Monitoring Optimisation\n",
    "\n",
    "In this notebook we cover how to monitor the model and certain metrics during optimisation.\n",
    "\n",
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ac54a777",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:26.243454Z",
     "iopub.status.busy": "2022-05-04T09:29:26.243179Z",
     "iopub.status.idle": "2022-05-04T09:29:29.058248Z",
     "shell.execute_reply": "2022-05-04T09:29:29.057780Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-04 09:29:27.095417: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-05-04 09:29:27.095444: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import ci_niter\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4fc9360",
   "metadata": {},
   "source": [
    "The monitoring functionality lives in `gpflow.monitor`.\n",
    "For now, we import `ModelToTensorBoard`, `ImageToTensorBoard`, `ScalarToTensorBoard` monitoring tasks and `MonitorTaskGroup` and `Monitor`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9bc2b58a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:29.060961Z",
     "iopub.status.busy": "2022-05-04T09:29:29.060748Z",
     "iopub.status.idle": "2022-05-04T09:29:29.063322Z",
     "shell.execute_reply": "2022-05-04T09:29:29.062940Z"
    }
   },
   "outputs": [],
   "source": [
    "from gpflow.monitor import (\n",
    "    ImageToTensorBoard,\n",
    "    ModelToTensorBoard,\n",
    "    Monitor,\n",
    "    MonitorTaskGroup,\n",
    "    ScalarToTensorBoard,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d8b8160",
   "metadata": {},
   "source": [
    "## Set up data and model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "116620bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:29.065360Z",
     "iopub.status.busy": "2022-05-04T09:29:29.065174Z",
     "iopub.status.idle": "2022-05-04T09:29:29.067660Z",
     "shell.execute_reply": "2022-05-04T09:29:29.067288Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define some configuration constants.\n",
    "\n",
    "num_data = 100\n",
    "noise_std = 0.1\n",
    "optimisation_steps = ci_niter(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1182a713",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:29.069753Z",
     "iopub.status.busy": "2022-05-04T09:29:29.069438Z",
     "iopub.status.idle": "2022-05-04T09:29:29.158074Z",
     "shell.execute_reply": "2022-05-04T09:29:29.157674Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f2c7ac06110>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dummy data.\n",
    "\n",
    "X = np.random.randn(num_data, 1)  # [N, 2]\n",
    "Y = np.sin(X) + 0.5 * np.cos(X) + np.random.randn(*X.shape) * noise_std  # [N, 1]\n",
    "plt.plot(X, Y, \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ee501a8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:29.160145Z",
     "iopub.status.busy": "2022-05-04T09:29:29.159950Z",
     "iopub.status.idle": "2022-05-04T09:29:29.205305Z",
     "shell.execute_reply": "2022-05-04T09:29:29.204912Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-04 09:29:29.161903: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-05-04 09:29:29.161934: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-05-04 09:29:29.161954: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (a18dc6881027): /proc/driver/nvidia/version does not exist\n",
      "2022-05-04 09:29:29.162216: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "&lt;gpflow.models.gpr.GPR object at 0x7f2c7a9f17b0&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value               </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)   </td><td>float64</td><td>[1. 2.]             </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.009999999999999998</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<gpflow.models.gpr.GPR object at 0x7f2c7a9f17b0>\n",
       "╒════════════════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤══════════════════════╕\n",
       "│ name                               │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │ value                │\n",
       "╞════════════════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪══════════════════════╡\n",
       "│ GPR.kernel.kernels[0].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[0].lengthscales │ Parameter │ Softplus         │         │ True        │ (2,)    │ float64 │ [1. 2.]              │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[1].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.likelihood.variance            │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.009999999999999998 │\n",
       "╘════════════════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧══════════════════════╛"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up model and print\n",
    "\n",
    "kernel = gpflow.kernels.SquaredExponential(lengthscales=[1.0, 2.0]) + gpflow.kernels.Linear()\n",
    "model = gpflow.models.GPR((X, Y), kernel, noise_variance=noise_std ** 2)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5031a52f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:29.207373Z",
     "iopub.status.busy": "2022-05-04T09:29:29.207179Z",
     "iopub.status.idle": "2022-05-04T09:29:29.357038Z",
     "shell.execute_reply": "2022-05-04T09:29:29.356631Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We define a function that plots the model's prediction (in the form of samples) together with the data.\n",
    "# Importantly, this function has no other argument than `fig: matplotlib.figure.Figure` and `ax: matplotlib.figure.Axes`.\n",
    "\n",
    "\n",
    "def plot_prediction(fig, ax):\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100).reshape(-1, 1)\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=20)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C1\", alpha=0.2)\n",
    "    ax.plot(X, Y, \"o\")\n",
    "\n",
    "\n",
    "# Let's check if the function does the desired plotting\n",
    "fig = plt.figure()\n",
    "ax = fig.subplots()\n",
    "plot_prediction(fig, ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94ccdeae",
   "metadata": {},
   "source": [
    "## Set up monitoring tasks\n",
    "\n",
    "We now define the `MonitorTask`s that will be executed during the optimisation.\n",
    "For this tutorial we set up three tasks:\n",
    "- `ModelToTensorBoard`: writes the models hyper-parameters such as `likelihood.variance` and `kernel.lengthscales` to a TensorBoard.\n",
    "- `ImageToTensorBoard`: writes custom matplotlib images to a TensorBoard.\n",
    "- `ScalarToTensorBoard`: writes any scalar value to a TensorBoard. Here, we use it to write the model's training objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a1d706ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:29.359221Z",
     "iopub.status.busy": "2022-05-04T09:29:29.359024Z",
     "iopub.status.idle": "2022-05-04T09:29:29.373244Z",
     "shell.execute_reply": "2022-05-04T09:29:29.372747Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs\"  # Directory where TensorBoard files will be written.\n",
    "model_task = ModelToTensorBoard(log_dir, model)\n",
    "image_task = ImageToTensorBoard(log_dir, plot_prediction, \"image_samples\")\n",
    "lml_task = ScalarToTensorBoard(log_dir, lambda: model.training_loss(), \"training_objective\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc9342bd",
   "metadata": {},
   "source": [
    "We now group the tasks in a set of fast and slow tasks and pass them to the monitor.\n",
    "This allows us to execute the groups at a different frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4aa0fe02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:29.375503Z",
     "iopub.status.busy": "2022-05-04T09:29:29.375253Z",
     "iopub.status.idle": "2022-05-04T09:29:29.378517Z",
     "shell.execute_reply": "2022-05-04T09:29:29.378108Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Plotting tasks can be quite slow. We want to run them less frequently.\n",
    "# We group them in a `MonitorTaskGroup` and set the period to 5.\n",
    "slow_tasks = MonitorTaskGroup(image_task, period=5)\n",
    "\n",
    "# The other tasks are fast. We run them at each iteration of the optimisation.\n",
    "fast_tasks = MonitorTaskGroup([model_task, lml_task], period=1)\n",
    "\n",
    "# Both groups are passed to the monitor.\n",
    "# `slow_tasks` will be run five times less frequently than `fast_tasks`.\n",
    "monitor = Monitor(fast_tasks, slow_tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "01c610c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:29.380279Z",
     "iopub.status.busy": "2022-05-04T09:29:29.380111Z",
     "iopub.status.idle": "2022-05-04T09:29:34.729349Z",
     "shell.execute_reply": "2022-05-04T09:29:34.728460Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-04 09:29:29.384260: W tensorflow/python/util/util.cc:368] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.\n"
     ]
    }
   ],
   "source": [
    "training_loss = model.training_loss_closure(\n",
    "    compile=True\n",
    ")  # compile=True (default): compiles using tf.function\n",
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "for step in range(optimisation_steps):\n",
    "    opt.minimize(training_loss, model.trainable_variables)\n",
    "    monitor(step)  # <-- run the monitoring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b13a462",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "TensorBoard is accessible through the browser, after launching the server by running `tensorboard --logdir ${logdir}`.\n",
    "See the [TensorFlow documentation on TensorBoard](https://www.tensorflow.org/tensorboard/get_started) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9216afa7",
   "metadata": {},
   "source": [
    "### For optimal performance, we can also wrap the monitor call inside `tf.function`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b9c38d6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:34.732029Z",
     "iopub.status.busy": "2022-05-04T09:29:34.731817Z",
     "iopub.status.idle": "2022-05-04T09:29:34.737058Z",
     "shell.execute_reply": "2022-05-04T09:29:34.736095Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "log_dir_compiled = f\"{log_dir}/compiled\"\n",
    "model_task = ModelToTensorBoard(log_dir_compiled, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_compiled, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "# Note that the `ImageToTensorBoard` task cannot be compiled, and is omitted from the monitoring\n",
    "monitor = Monitor(MonitorTaskGroup([model_task, lml_task]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "587aaf75",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In the optimisation loop below we use `tf.range` (rather than Python's built-in range) to avoid re-tracing the `step` function each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7f357483",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:34.739287Z",
     "iopub.status.busy": "2022-05-04T09:29:34.739098Z",
     "iopub.status.idle": "2022-05-04T09:29:36.671458Z",
     "shell.execute_reply": "2022-05-04T09:29:36.670735Z"
    }
   },
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def step(i):\n",
    "    opt.minimize(model.training_loss, model.trainable_variables)\n",
    "    monitor(i)\n",
    "\n",
    "\n",
    "# Notice the tf.range\n",
    "for i in tf.range(optimisation_steps):\n",
    "    step(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "274f5169",
   "metadata": {},
   "source": [
    "When opening TensorBoard, you may need to use the command `tensorboard --logdir . --reload_multifile=true`, as multiple `FileWriter` objects are used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "161fcb57",
   "metadata": {},
   "source": [
    "### Scipy Optimization monitoring\n",
    "\n",
    "Note that if you want to use the `Scipy` optimizer provided by GPflow, and want to monitor the training progress, then you need to simply replace\n",
    "the optimization loop with a single call to its `minimize` method and pass in the monitor as a `step_callback` keyword argument:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4af7346a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:36.674293Z",
     "iopub.status.busy": "2022-05-04T09:29:36.674077Z",
     "iopub.status.idle": "2022-05-04T09:29:36.690141Z",
     "shell.execute_reply": "2022-05-04T09:29:36.688951Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "\n",
    "log_dir_scipy = f\"{log_dir}/scipy\"\n",
    "model_task = ModelToTensorBoard(log_dir_scipy, model)\n",
    "lml_task = ScalarToTensorBoard(log_dir_scipy, lambda: model.training_loss(), \"training_objective\")\n",
    "image_task = ImageToTensorBoard(log_dir_scipy, plot_prediction, \"image_samples\")\n",
    "\n",
    "monitor = Monitor(\n",
    "    MonitorTaskGroup([model_task, lml_task], period=1), MonitorTaskGroup(image_task, period=5)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "68c0d25d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-04T09:29:36.692287Z",
     "iopub.status.busy": "2022-05-04T09:29:36.692100Z",
     "iopub.status.idle": "2022-05-04T09:29:38.316967Z",
     "shell.execute_reply": "2022-05-04T09:29:38.316549Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: -69.68099880889753\n",
       " hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-2.96735825e-04, -4.30340661e-04,  3.97830673e-04,  2.26009904e-06,\n",
       "        4.29147152e-04])\n",
       "  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
       "     nfev: 37\n",
       "      nit: 28\n",
       "     njev: 37\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  2.07005977,   1.74612938,   0.18194306, -15.21875411,\n",
       "        -4.53840856])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt.minimize(training_loss, model.trainable_variables, step_callback=monitor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74f5ce4b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "da55fbd2",
   "metadata": {},
   "source": [
    "# Monitoring Optimisation\n",
    "\n",
    "In this notebook we cover how to monitor the model and certain metrics during optimisation.\n",
    "\n",
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bd342743",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:24.763863Z",
     "iopub.status.busy": "2022-06-10T16:36:24.763378Z",
     "iopub.status.idle": "2022-06-10T16:36:28.162116Z",
     "shell.execute_reply": "2022-06-10T16:36:28.161476Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-06-10 16:36:25.742839: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-06-10 16:36:25.742867: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a74590bb",
   "metadata": {},
   "source": [
    "The monitoring functionality lives in `gpflow.monitor`.\n",
    "For now, we import `ModelToTensorBoard`, `ImageToTensorBoard`, `ScalarToTensorBoard` monitoring tasks and `MonitorTaskGroup` and `Monitor`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "216aaf0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:28.165576Z",
     "iopub.status.busy": "2022-06-10T16:36:28.165116Z",
     "iopub.status.idle": "2022-06-10T16:36:28.168396Z",
     "shell.execute_reply": "2022-06-10T16:36:28.167850Z"
    }
   },
   "outputs": [],
   "source": [
    "from gpflow.monitor import (\n",
    "    ImageToTensorBoard,\n",
    "    ModelToTensorBoard,\n",
    "    Monitor,\n",
    "    MonitorTaskGroup,\n",
    "    ScalarToTensorBoard,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07e9670c",
   "metadata": {},
   "source": [
    "## Set up data and model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f8e36cfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:28.171068Z",
     "iopub.status.busy": "2022-06-10T16:36:28.170776Z",
     "iopub.status.idle": "2022-06-10T16:36:28.173846Z",
     "shell.execute_reply": "2022-06-10T16:36:28.173316Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define some configuration constants.\n",
    "\n",
    "num_data = 100\n",
    "noise_std = 0.1\n",
    "optimisation_steps = reduce_in_tests(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8e1cbbb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:28.176263Z",
     "iopub.status.busy": "2022-06-10T16:36:28.176007Z",
     "iopub.status.idle": "2022-06-10T16:36:28.274595Z",
     "shell.execute_reply": "2022-06-10T16:36:28.274011Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fe886db2cb0>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dummy data.\n",
    "\n",
    "X = np.random.randn(num_data, 1)  # [N, 2]\n",
    "Y = np.sin(X) + 0.5 * np.cos(X) + np.random.randn(*X.shape) * noise_std  # [N, 1]\n",
    "plt.plot(X, Y, \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f93e0eb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:28.277137Z",
     "iopub.status.busy": "2022-06-10T16:36:28.276863Z",
     "iopub.status.idle": "2022-06-10T16:36:28.327532Z",
     "shell.execute_reply": "2022-06-10T16:36:28.326873Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-06-10 16:36:28.279216: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-06-10 16:36:28.279245: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-06-10 16:36:28.279267: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (141dfd1f541c): /proc/driver/nvidia/version does not exist\n",
      "2022-06-10 16:36:28.279541: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "&lt;gpflow.models.gpr.GPR object at 0x7fe886bb45e0&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value               </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)   </td><td>float64</td><td>[1. 2.]             </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.009999999999999998</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<gpflow.models.gpr.GPR object at 0x7fe886bb45e0>\n",
       "╒════════════════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤══════════════════════╕\n",
       "│ name                               │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │ value                │\n",
       "╞════════════════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪══════════════════════╡\n",
       "│ GPR.kernel.kernels[0].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[0].lengthscales │ Parameter │ Softplus         │         │ True        │ (2,)    │ float64 │ [1. 2.]              │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[1].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.likelihood.variance            │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.009999999999999998 │\n",
       "╘════════════════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧══════════════════════╛"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up model and print\n",
    "\n",
    "kernel = gpflow.kernels.SquaredExponential(lengthscales=[1.0, 2.0]) + gpflow.kernels.Linear()\n",
    "model = gpflow.models.GPR((X, Y), kernel, noise_variance=noise_std ** 2)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c83a6ad7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:28.330426Z",
     "iopub.status.busy": "2022-06-10T16:36:28.330119Z",
     "iopub.status.idle": "2022-06-10T16:36:28.479158Z",
     "shell.execute_reply": "2022-06-10T16:36:28.478530Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We define a function that plots the model's prediction (in the form of samples) together with the data.\n",
    "# Importantly, this function has no other argument than `fig: matplotlib.figure.Figure` and `ax: matplotlib.figure.Axes`.\n",
    "\n",
    "\n",
    "def plot_prediction(fig, ax):\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100).reshape(-1, 1)\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=20)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C1\", alpha=0.2)\n",
    "    ax.plot(X, Y, \"o\")\n",
    "\n",
    "\n",
    "# Let's check if the function does the desired plotting\n",
    "fig = plt.figure()\n",
    "ax = fig.subplots()\n",
    "plot_prediction(fig, ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "847f7f14",
   "metadata": {},
   "source": [
    "## Set up monitoring tasks\n",
    "\n",
    "We now define the `MonitorTask`s that will be executed during the optimisation.\n",
    "For this tutorial we set up three tasks:\n",
    "- `ModelToTensorBoard`: writes the models hyper-parameters such as `likelihood.variance` and `kernel.lengthscales` to a TensorBoard.\n",
    "- `ImageToTensorBoard`: writes custom matplotlib images to a TensorBoard.\n",
    "- `ScalarToTensorBoard`: writes any scalar value to a TensorBoard. Here, we use it to write the model's training objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "379bb907",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:28.481942Z",
     "iopub.status.busy": "2022-06-10T16:36:28.481633Z",
     "iopub.status.idle": "2022-06-10T16:36:28.641039Z",
     "shell.execute_reply": "2022-06-10T16:36:28.640239Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs\"  # Directory where TensorBoard files will be written.\n",
    "model_task = ModelToTensorBoard(log_dir, model)\n",
    "image_task = ImageToTensorBoard(log_dir, plot_prediction, \"image_samples\")\n",
    "lml_task = ScalarToTensorBoard(log_dir, lambda: model.training_loss(), \"training_objective\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e089273f",
   "metadata": {},
   "source": [
    "We now group the tasks in a set of fast and slow tasks and pass them to the monitor.\n",
    "This allows us to execute the groups at a different frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ddb07648",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:28.644285Z",
     "iopub.status.busy": "2022-06-10T16:36:28.643994Z",
     "iopub.status.idle": "2022-06-10T16:36:28.647827Z",
     "shell.execute_reply": "2022-06-10T16:36:28.647141Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Plotting tasks can be quite slow. We want to run them less frequently.\n",
    "# We group them in a `MonitorTaskGroup` and set the period to 5.\n",
    "slow_tasks = MonitorTaskGroup(image_task, period=5)\n",
    "\n",
    "# The other tasks are fast. We run them at each iteration of the optimisation.\n",
    "fast_tasks = MonitorTaskGroup([model_task, lml_task], period=1)\n",
    "\n",
    "# Both groups are passed to the monitor.\n",
    "# `slow_tasks` will be run five times less frequently than `fast_tasks`.\n",
    "monitor = Monitor(fast_tasks, slow_tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f0092c04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:28.650458Z",
     "iopub.status.busy": "2022-06-10T16:36:28.650194Z",
     "iopub.status.idle": "2022-06-10T16:36:37.091435Z",
     "shell.execute_reply": "2022-06-10T16:36:37.090706Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-06-10 16:36:28.655040: W tensorflow/python/util/util.cc:368] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.\n"
     ]
    }
   ],
   "source": [
    "training_loss = model.training_loss_closure(\n",
    "    compile=True\n",
    ")  # compile=True (default): compiles using tf.function\n",
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "for step in range(optimisation_steps):\n",
    "    opt.minimize(training_loss, model.trainable_variables)\n",
    "    monitor(step)  # <-- run the monitoring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad9f6bba",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "TensorBoard is accessible through the browser, after launching the server by running `tensorboard --logdir ${logdir}`.\n",
    "See the [TensorFlow documentation on TensorBoard](https://www.tensorflow.org/tensorboard/get_started) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a14ca3ad",
   "metadata": {},
   "source": [
    "### For optimal performance, we can also wrap the monitor call inside `tf.function`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "79be7d0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:37.132773Z",
     "iopub.status.busy": "2022-06-10T16:36:37.132357Z",
     "iopub.status.idle": "2022-06-10T16:36:37.139104Z",
     "shell.execute_reply": "2022-06-10T16:36:37.138384Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "log_dir_compiled = f\"{log_dir}/compiled\"\n",
    "model_task = ModelToTensorBoard(log_dir_compiled, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_compiled, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "# Note that the `ImageToTensorBoard` task cannot be compiled, and is omitted from the monitoring\n",
    "monitor = Monitor(MonitorTaskGroup([model_task, lml_task]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55d56667",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In the optimisation loop below we use `tf.range` (rather than Python's built-in range) to avoid re-tracing the `step` function each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a3ed9336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:37.141945Z",
     "iopub.status.busy": "2022-06-10T16:36:37.141631Z",
     "iopub.status.idle": "2022-06-10T16:36:39.417408Z",
     "shell.execute_reply": "2022-06-10T16:36:39.416683Z"
    }
   },
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def step(i):\n",
    "    opt.minimize(model.training_loss, model.trainable_variables)\n",
    "    monitor(i)\n",
    "\n",
    "\n",
    "# Notice the tf.range\n",
    "for i in tf.range(optimisation_steps):\n",
    "    step(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce1900c6",
   "metadata": {},
   "source": [
    "When opening TensorBoard, you may need to use the command `tensorboard --logdir . --reload_multifile=true`, as multiple `FileWriter` objects are used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47c16381",
   "metadata": {},
   "source": [
    "### Scipy Optimization monitoring\n",
    "\n",
    "Note that if you want to use the `Scipy` optimizer provided by GPflow, and want to monitor the training progress, then you need to simply replace\n",
    "the optimization loop with a single call to its `minimize` method and pass in the monitor as a `step_callback` keyword argument:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "21766cc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:39.420759Z",
     "iopub.status.busy": "2022-06-10T16:36:39.420406Z",
     "iopub.status.idle": "2022-06-10T16:36:39.440662Z",
     "shell.execute_reply": "2022-06-10T16:36:39.439861Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "\n",
    "log_dir_scipy = f\"{log_dir}/scipy\"\n",
    "model_task = ModelToTensorBoard(log_dir_scipy, model)\n",
    "lml_task = ScalarToTensorBoard(log_dir_scipy, lambda: model.training_loss(), \"training_objective\")\n",
    "image_task = ImageToTensorBoard(log_dir_scipy, plot_prediction, \"image_samples\")\n",
    "\n",
    "monitor = Monitor(\n",
    "    MonitorTaskGroup([model_task, lml_task], period=1), MonitorTaskGroup(image_task, period=5)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "722027de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-10T16:36:39.443801Z",
     "iopub.status.busy": "2022-06-10T16:36:39.443483Z",
     "iopub.status.idle": "2022-06-10T16:36:41.293260Z",
     "shell.execute_reply": "2022-06-10T16:36:41.292694Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: -69.68099880889753\n",
       " hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-2.96735825e-04, -4.30340661e-04,  3.97830673e-04,  2.26009904e-06,\n",
       "        4.29147152e-04])\n",
       "  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
       "     nfev: 37\n",
       "      nit: 28\n",
       "     njev: 37\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  2.07005977,   1.74612938,   0.18194306, -15.21875411,\n",
       "        -4.53840856])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt.minimize(training_loss, model.trainable_variables, step_callback=monitor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0569a99",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

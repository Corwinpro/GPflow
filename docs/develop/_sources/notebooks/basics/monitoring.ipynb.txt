{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f1098c3e",
   "metadata": {},
   "source": [
    "# Monitoring Optimisation\n",
    "\n",
    "In this notebook we cover how to monitor the model and certain metrics during optimisation.\n",
    "\n",
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "47fe1d8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:36.626280Z",
     "iopub.status.busy": "2022-05-10T10:25:36.625878Z",
     "iopub.status.idle": "2022-05-10T10:25:39.713492Z",
     "shell.execute_reply": "2022-05-10T10:25:39.713009Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-10 10:25:37.591629: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-05-10 10:25:37.591673: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import ci_niter\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2d20874",
   "metadata": {},
   "source": [
    "The monitoring functionality lives in `gpflow.monitor`.\n",
    "For now, we import `ModelToTensorBoard`, `ImageToTensorBoard`, `ScalarToTensorBoard` monitoring tasks and `MonitorTaskGroup` and `Monitor`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f71e50fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:39.716375Z",
     "iopub.status.busy": "2022-05-10T10:25:39.716164Z",
     "iopub.status.idle": "2022-05-10T10:25:39.718878Z",
     "shell.execute_reply": "2022-05-10T10:25:39.718422Z"
    }
   },
   "outputs": [],
   "source": [
    "from gpflow.monitor import (\n",
    "    ImageToTensorBoard,\n",
    "    ModelToTensorBoard,\n",
    "    Monitor,\n",
    "    MonitorTaskGroup,\n",
    "    ScalarToTensorBoard,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cf7128c",
   "metadata": {},
   "source": [
    "## Set up data and model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b692fb57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:39.720834Z",
     "iopub.status.busy": "2022-05-10T10:25:39.720655Z",
     "iopub.status.idle": "2022-05-10T10:25:39.723276Z",
     "shell.execute_reply": "2022-05-10T10:25:39.722842Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define some configuration constants.\n",
    "\n",
    "num_data = 100\n",
    "noise_std = 0.1\n",
    "optimisation_steps = ci_niter(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3ca09eb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:39.725146Z",
     "iopub.status.busy": "2022-05-10T10:25:39.724965Z",
     "iopub.status.idle": "2022-05-10T10:25:39.818169Z",
     "shell.execute_reply": "2022-05-10T10:25:39.817737Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fcde862a230>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dummy data.\n",
    "\n",
    "X = np.random.randn(num_data, 1)  # [N, 2]\n",
    "Y = np.sin(X) + 0.5 * np.cos(X) + np.random.randn(*X.shape) * noise_std  # [N, 1]\n",
    "plt.plot(X, Y, \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c5bc2e43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:39.820396Z",
     "iopub.status.busy": "2022-05-10T10:25:39.820190Z",
     "iopub.status.idle": "2022-05-10T10:25:39.900177Z",
     "shell.execute_reply": "2022-05-10T10:25:39.899732Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-10 10:25:39.822342: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-05-10 10:25:39.822372: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-05-10 10:25:39.822389: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (6053e66b1f76): /proc/driver/nvidia/version does not exist\n",
      "2022-05-10 10:25:39.822646: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "&lt;gpflow.models.gpr.GPR object at 0x7fcde6425f30&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value               </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)   </td><td>float64</td><td>[1. 2.]             </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.009999999999999998</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<gpflow.models.gpr.GPR object at 0x7fcde6425f30>\n",
       "╒════════════════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤══════════════════════╕\n",
       "│ name                               │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │ value                │\n",
       "╞════════════════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪══════════════════════╡\n",
       "│ GPR.kernel.kernels[0].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[0].lengthscales │ Parameter │ Softplus         │         │ True        │ (2,)    │ float64 │ [1. 2.]              │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[1].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.likelihood.variance            │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.009999999999999998 │\n",
       "╘════════════════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧══════════════════════╛"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up model and print\n",
    "\n",
    "kernel = gpflow.kernels.SquaredExponential(lengthscales=[1.0, 2.0]) + gpflow.kernels.Linear()\n",
    "model = gpflow.models.GPR((X, Y), kernel, noise_variance=noise_std ** 2)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ff1756b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:39.902538Z",
     "iopub.status.busy": "2022-05-10T10:25:39.902332Z",
     "iopub.status.idle": "2022-05-10T10:25:40.031484Z",
     "shell.execute_reply": "2022-05-10T10:25:40.031033Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We define a function that plots the model's prediction (in the form of samples) together with the data.\n",
    "# Importantly, this function has no other argument than `fig: matplotlib.figure.Figure` and `ax: matplotlib.figure.Axes`.\n",
    "\n",
    "\n",
    "def plot_prediction(fig, ax):\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100).reshape(-1, 1)\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=20)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C1\", alpha=0.2)\n",
    "    ax.plot(X, Y, \"o\")\n",
    "\n",
    "\n",
    "# Let's check if the function does the desired plotting\n",
    "fig = plt.figure()\n",
    "ax = fig.subplots()\n",
    "plot_prediction(fig, ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d516223",
   "metadata": {},
   "source": [
    "## Set up monitoring tasks\n",
    "\n",
    "We now define the `MonitorTask`s that will be executed during the optimisation.\n",
    "For this tutorial we set up three tasks:\n",
    "- `ModelToTensorBoard`: writes the models hyper-parameters such as `likelihood.variance` and `kernel.lengthscales` to a TensorBoard.\n",
    "- `ImageToTensorBoard`: writes custom matplotlib images to a TensorBoard.\n",
    "- `ScalarToTensorBoard`: writes any scalar value to a TensorBoard. Here, we use it to write the model's training objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6981ea3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:40.033776Z",
     "iopub.status.busy": "2022-05-10T10:25:40.033576Z",
     "iopub.status.idle": "2022-05-10T10:25:40.080889Z",
     "shell.execute_reply": "2022-05-10T10:25:40.080388Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs\"  # Directory where TensorBoard files will be written.\n",
    "model_task = ModelToTensorBoard(log_dir, model)\n",
    "image_task = ImageToTensorBoard(log_dir, plot_prediction, \"image_samples\")\n",
    "lml_task = ScalarToTensorBoard(log_dir, lambda: model.training_loss(), \"training_objective\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75114b63",
   "metadata": {},
   "source": [
    "We now group the tasks in a set of fast and slow tasks and pass them to the monitor.\n",
    "This allows us to execute the groups at a different frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b7a4815f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:40.083705Z",
     "iopub.status.busy": "2022-05-10T10:25:40.083469Z",
     "iopub.status.idle": "2022-05-10T10:25:40.086788Z",
     "shell.execute_reply": "2022-05-10T10:25:40.086355Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Plotting tasks can be quite slow. We want to run them less frequently.\n",
    "# We group them in a `MonitorTaskGroup` and set the period to 5.\n",
    "slow_tasks = MonitorTaskGroup(image_task, period=5)\n",
    "\n",
    "# The other tasks are fast. We run them at each iteration of the optimisation.\n",
    "fast_tasks = MonitorTaskGroup([model_task, lml_task], period=1)\n",
    "\n",
    "# Both groups are passed to the monitor.\n",
    "# `slow_tasks` will be run five times less frequently than `fast_tasks`.\n",
    "monitor = Monitor(fast_tasks, slow_tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9d74f82c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:40.088750Z",
     "iopub.status.busy": "2022-05-10T10:25:40.088572Z",
     "iopub.status.idle": "2022-05-10T10:25:45.871807Z",
     "shell.execute_reply": "2022-05-10T10:25:45.871285Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-10 10:25:40.093249: W tensorflow/python/util/util.cc:368] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.\n"
     ]
    }
   ],
   "source": [
    "training_loss = model.training_loss_closure(\n",
    "    compile=True\n",
    ")  # compile=True (default): compiles using tf.function\n",
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "for step in range(optimisation_steps):\n",
    "    opt.minimize(training_loss, model.trainable_variables)\n",
    "    monitor(step)  # <-- run the monitoring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10067389",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "TensorBoard is accessible through the browser, after launching the server by running `tensorboard --logdir ${logdir}`.\n",
    "See the [TensorFlow documentation on TensorBoard](https://www.tensorflow.org/tensorboard/get_started) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8dc0d1ae",
   "metadata": {},
   "source": [
    "### For optimal performance, we can also wrap the monitor call inside `tf.function`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8a35ea12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:45.874546Z",
     "iopub.status.busy": "2022-05-10T10:25:45.874332Z",
     "iopub.status.idle": "2022-05-10T10:25:45.879126Z",
     "shell.execute_reply": "2022-05-10T10:25:45.878694Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "log_dir_compiled = f\"{log_dir}/compiled\"\n",
    "model_task = ModelToTensorBoard(log_dir_compiled, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_compiled, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "# Note that the `ImageToTensorBoard` task cannot be compiled, and is omitted from the monitoring\n",
    "monitor = Monitor(MonitorTaskGroup([model_task, lml_task]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a52e6c7",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In the optimisation loop below we use `tf.range` (rather than Python's built-in range) to avoid re-tracing the `step` function each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a9bac94c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:45.881268Z",
     "iopub.status.busy": "2022-05-10T10:25:45.881070Z",
     "iopub.status.idle": "2022-05-10T10:25:47.840184Z",
     "shell.execute_reply": "2022-05-10T10:25:47.839684Z"
    }
   },
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def step(i):\n",
    "    opt.minimize(model.training_loss, model.trainable_variables)\n",
    "    monitor(i)\n",
    "\n",
    "\n",
    "# Notice the tf.range\n",
    "for i in tf.range(optimisation_steps):\n",
    "    step(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49ce3e4a",
   "metadata": {},
   "source": [
    "When opening TensorBoard, you may need to use the command `tensorboard --logdir . --reload_multifile=true`, as multiple `FileWriter` objects are used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91eff3f3",
   "metadata": {},
   "source": [
    "### Scipy Optimization monitoring\n",
    "\n",
    "Note that if you want to use the `Scipy` optimizer provided by GPflow, and want to monitor the training progress, then you need to simply replace\n",
    "the optimization loop with a single call to its `minimize` method and pass in the monitor as a `step_callback` keyword argument:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8bf0890d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:47.842822Z",
     "iopub.status.busy": "2022-05-10T10:25:47.842614Z",
     "iopub.status.idle": "2022-05-10T10:25:47.858409Z",
     "shell.execute_reply": "2022-05-10T10:25:47.857978Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "\n",
    "log_dir_scipy = f\"{log_dir}/scipy\"\n",
    "model_task = ModelToTensorBoard(log_dir_scipy, model)\n",
    "lml_task = ScalarToTensorBoard(log_dir_scipy, lambda: model.training_loss(), \"training_objective\")\n",
    "image_task = ImageToTensorBoard(log_dir_scipy, plot_prediction, \"image_samples\")\n",
    "\n",
    "monitor = Monitor(\n",
    "    MonitorTaskGroup([model_task, lml_task], period=1), MonitorTaskGroup(image_task, period=5)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "41a4e36f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T10:25:47.860667Z",
     "iopub.status.busy": "2022-05-10T10:25:47.860476Z",
     "iopub.status.idle": "2022-05-10T10:25:49.619506Z",
     "shell.execute_reply": "2022-05-10T10:25:49.619068Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: -69.68099880889753\n",
       " hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-2.96735825e-04, -4.30340661e-04,  3.97830673e-04,  2.26009904e-06,\n",
       "        4.29147152e-04])\n",
       "  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
       "     nfev: 37\n",
       "      nit: 28\n",
       "     njev: 37\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  2.07005977,   1.74612938,   0.18194306, -15.21875411,\n",
       "        -4.53840856])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt.minimize(training_loss, model.trainable_variables, step_callback=monitor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0b58765",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

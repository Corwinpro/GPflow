{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "05677a00",
   "metadata": {},
   "source": [
    "# Monitoring Optimisation\n",
    "\n",
    "In this notebook we cover how to monitor the model and certain metrics during optimisation.\n",
    "\n",
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1a1f3206",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:21.003175Z",
     "iopub.status.busy": "2022-04-01T15:38:21.002858Z",
     "iopub.status.idle": "2022-04-01T15:38:24.287820Z",
     "shell.execute_reply": "2022-04-01T15:38:24.287182Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-04-01 15:38:22.132638: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-04-01 15:38:22.132665: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import ci_niter\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a84ea6e3",
   "metadata": {},
   "source": [
    "The monitoring functionality lives in `gpflow.monitor`.\n",
    "For now, we import `ModelToTensorBoard`, `ImageToTensorBoard`, `ScalarToTensorBoard` monitoring tasks and `MonitorTaskGroup` and `Monitor`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a45ce728",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:24.291357Z",
     "iopub.status.busy": "2022-04-01T15:38:24.290970Z",
     "iopub.status.idle": "2022-04-01T15:38:24.295248Z",
     "shell.execute_reply": "2022-04-01T15:38:24.294522Z"
    }
   },
   "outputs": [],
   "source": [
    "from gpflow.monitor import (\n",
    "    ImageToTensorBoard,\n",
    "    ModelToTensorBoard,\n",
    "    Monitor,\n",
    "    MonitorTaskGroup,\n",
    "    ScalarToTensorBoard,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7578e870",
   "metadata": {},
   "source": [
    "## Set up data and model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c03e8027",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:24.298518Z",
     "iopub.status.busy": "2022-04-01T15:38:24.298168Z",
     "iopub.status.idle": "2022-04-01T15:38:24.302196Z",
     "shell.execute_reply": "2022-04-01T15:38:24.301551Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define some configuration constants.\n",
    "\n",
    "num_data = 100\n",
    "noise_std = 0.1\n",
    "optimisation_steps = ci_niter(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "caa43cf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:24.305697Z",
     "iopub.status.busy": "2022-04-01T15:38:24.305385Z",
     "iopub.status.idle": "2022-04-01T15:38:24.409849Z",
     "shell.execute_reply": "2022-04-01T15:38:24.409225Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f89661a9960>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dummy data.\n",
    "\n",
    "X = np.random.randn(num_data, 1)  # [N, 2]\n",
    "Y = np.sin(X) + 0.5 * np.cos(X) + np.random.randn(*X.shape) * noise_std  # [N, 1]\n",
    "plt.plot(X, Y, \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "edbb9782",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:24.413333Z",
     "iopub.status.busy": "2022-04-01T15:38:24.413073Z",
     "iopub.status.idle": "2022-04-01T15:38:24.467772Z",
     "shell.execute_reply": "2022-04-01T15:38:24.467265Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-04-01 15:38:24.415553: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-04-01 15:38:24.415586: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-04-01 15:38:24.415607: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (3ba97d400bcb): /proc/driver/nvidia/version does not exist\n",
      "2022-04-01 15:38:24.415956: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "&lt;gpflow.models.gpr.GPR object at 0x7f89661ed060&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value               </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)   </td><td>float64</td><td>[1. 2.]             </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.009999999999999998</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<gpflow.models.gpr.GPR object at 0x7f89661ed060>\n",
       "╒════════════════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤══════════════════════╕\n",
       "│ name                               │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │ value                │\n",
       "╞════════════════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪══════════════════════╡\n",
       "│ GPR.kernel.kernels[0].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[0].lengthscales │ Parameter │ Softplus         │         │ True        │ (2,)    │ float64 │ [1. 2.]              │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[1].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.likelihood.variance            │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.009999999999999998 │\n",
       "╘════════════════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧══════════════════════╛"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up model and print\n",
    "\n",
    "kernel = gpflow.kernels.SquaredExponential(lengthscales=[1.0, 2.0]) + gpflow.kernels.Linear()\n",
    "model = gpflow.models.GPR((X, Y), kernel, noise_variance=noise_std ** 2)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b413223a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:24.469929Z",
     "iopub.status.busy": "2022-04-01T15:38:24.469724Z",
     "iopub.status.idle": "2022-04-01T15:38:24.744245Z",
     "shell.execute_reply": "2022-04-01T15:38:24.743566Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We define a function that plots the model's prediction (in the form of samples) together with the data.\n",
    "# Importantly, this function has no other argument than `fig: matplotlib.figure.Figure` and `ax: matplotlib.figure.Axes`.\n",
    "\n",
    "\n",
    "def plot_prediction(fig, ax):\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100).reshape(-1, 1)\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=20)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C1\", alpha=0.2)\n",
    "    ax.plot(X, Y, \"o\")\n",
    "\n",
    "\n",
    "# Let's check if the function does the desired plotting\n",
    "fig = plt.figure()\n",
    "ax = fig.subplots()\n",
    "plot_prediction(fig, ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35d89206",
   "metadata": {},
   "source": [
    "## Set up monitoring tasks\n",
    "\n",
    "We now define the `MonitorTask`s that will be executed during the optimisation.\n",
    "For this tutorial we set up three tasks:\n",
    "- `ModelToTensorBoard`: writes the models hyper-parameters such as `likelihood.variance` and `kernel.lengthscales` to a TensorBoard.\n",
    "- `ImageToTensorBoard`: writes custom matplotlib images to a TensorBoard.\n",
    "- `ScalarToTensorBoard`: writes any scalar value to a TensorBoard. Here, we use it to write the model's training objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9864b81f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:24.747689Z",
     "iopub.status.busy": "2022-04-01T15:38:24.747441Z",
     "iopub.status.idle": "2022-04-01T15:38:24.764738Z",
     "shell.execute_reply": "2022-04-01T15:38:24.764086Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs\"  # Directory where TensorBoard files will be written.\n",
    "model_task = ModelToTensorBoard(log_dir, model)\n",
    "image_task = ImageToTensorBoard(log_dir, plot_prediction, \"image_samples\")\n",
    "lml_task = ScalarToTensorBoard(log_dir, lambda: model.training_loss(), \"training_objective\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e164110c",
   "metadata": {},
   "source": [
    "We now group the tasks in a set of fast and slow tasks and pass them to the monitor.\n",
    "This allows us to execute the groups at a different frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "07fd7564",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:24.768236Z",
     "iopub.status.busy": "2022-04-01T15:38:24.768019Z",
     "iopub.status.idle": "2022-04-01T15:38:24.774400Z",
     "shell.execute_reply": "2022-04-01T15:38:24.773838Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Plotting tasks can be quite slow. We want to run them less frequently.\n",
    "# We group them in a `MonitorTaskGroup` and set the period to 5.\n",
    "slow_tasks = MonitorTaskGroup(image_task, period=5)\n",
    "\n",
    "# The other tasks are fast. We run them at each iteration of the optimisation.\n",
    "fast_tasks = MonitorTaskGroup([model_task, lml_task], period=1)\n",
    "\n",
    "# Both groups are passed to the monitor.\n",
    "# `slow_tasks` will be run five times less frequently than `fast_tasks`.\n",
    "monitor = Monitor(fast_tasks, slow_tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6d1e55b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:24.776666Z",
     "iopub.status.busy": "2022-04-01T15:38:24.776436Z",
     "iopub.status.idle": "2022-04-01T15:38:31.217310Z",
     "shell.execute_reply": "2022-04-01T15:38:31.216729Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-04-01 15:38:24.782065: W tensorflow/python/util/util.cc:368] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.\n"
     ]
    }
   ],
   "source": [
    "training_loss = model.training_loss_closure(\n",
    "    compile=True\n",
    ")  # compile=True (default): compiles using tf.function\n",
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "for step in range(optimisation_steps):\n",
    "    opt.minimize(training_loss, model.trainable_variables)\n",
    "    monitor(step)  # <-- run the monitoring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99ff9518",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "TensorBoard is accessible through the browser, after launching the server by running `tensorboard --logdir ${logdir}`.\n",
    "See the [TensorFlow documentation on TensorBoard](https://www.tensorflow.org/tensorboard/get_started) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e376c690",
   "metadata": {},
   "source": [
    "### For optimal performance, we can also wrap the monitor call inside `tf.function`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f3f5d9bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:31.221374Z",
     "iopub.status.busy": "2022-04-01T15:38:31.221124Z",
     "iopub.status.idle": "2022-04-01T15:38:31.226778Z",
     "shell.execute_reply": "2022-04-01T15:38:31.226124Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "log_dir_compiled = f\"{log_dir}/compiled\"\n",
    "model_task = ModelToTensorBoard(log_dir_compiled, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_compiled, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "# Note that the `ImageToTensorBoard` task cannot be compiled, and is omitted from the monitoring\n",
    "monitor = Monitor(MonitorTaskGroup([model_task, lml_task]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efab4bab",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In the optimisation loop below we use `tf.range` (rather than Python's built-in range) to avoid re-tracing the `step` function each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "75751ab9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:31.230183Z",
     "iopub.status.busy": "2022-04-01T15:38:31.229907Z",
     "iopub.status.idle": "2022-04-01T15:38:33.150999Z",
     "shell.execute_reply": "2022-04-01T15:38:33.150458Z"
    }
   },
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def step(i):\n",
    "    opt.minimize(model.training_loss, model.trainable_variables)\n",
    "    monitor(i)\n",
    "\n",
    "\n",
    "# Notice the tf.range\n",
    "for i in tf.range(optimisation_steps):\n",
    "    step(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f617648d",
   "metadata": {},
   "source": [
    "When opening TensorBoard, you may need to use the command `tensorboard --logdir . --reload_multifile=true`, as multiple `FileWriter` objects are used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "503b49c6",
   "metadata": {},
   "source": [
    "### Scipy Optimization monitoring\n",
    "\n",
    "Note that if you want to use the `Scipy` optimizer provided by GPflow, and want to monitor the training progress, then you need to simply replace\n",
    "the optimization loop with a single call to its `minimize` method and pass in the monitor as a `step_callback` keyword argument:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "81c535a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:33.153580Z",
     "iopub.status.busy": "2022-04-01T15:38:33.153361Z",
     "iopub.status.idle": "2022-04-01T15:38:33.170413Z",
     "shell.execute_reply": "2022-04-01T15:38:33.169886Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "\n",
    "log_dir_scipy = f\"{log_dir}/scipy\"\n",
    "model_task = ModelToTensorBoard(log_dir_scipy, model)\n",
    "lml_task = ScalarToTensorBoard(log_dir_scipy, lambda: model.training_loss(), \"training_objective\")\n",
    "image_task = ImageToTensorBoard(log_dir_scipy, plot_prediction, \"image_samples\")\n",
    "\n",
    "monitor = Monitor(\n",
    "    MonitorTaskGroup([model_task, lml_task], period=1), MonitorTaskGroup(image_task, period=5)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f2100865",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-01T15:38:33.172829Z",
     "iopub.status.busy": "2022-04-01T15:38:33.172626Z",
     "iopub.status.idle": "2022-04-01T15:38:35.338367Z",
     "shell.execute_reply": "2022-04-01T15:38:35.337869Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: -69.68099880889753\n",
       " hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-2.96735825e-04, -4.30340661e-04,  3.97830673e-04,  2.26009904e-06,\n",
       "        4.29147152e-04])\n",
       "  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
       "     nfev: 37\n",
       "      nit: 28\n",
       "     njev: 37\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  2.07005977,   1.74612938,   0.18194306, -15.21875411,\n",
       "        -4.53840856])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt.minimize(training_loss, model.trainable_variables, step_callback=monitor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0867b617",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

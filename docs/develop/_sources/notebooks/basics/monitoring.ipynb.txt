{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e35b0e12",
   "metadata": {},
   "source": [
    "# Monitoring Optimisation\n",
    "\n",
    "In this notebook we cover how to monitor the model and certain metrics during optimisation.\n",
    "\n",
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ccdb2a05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:44.873152Z",
     "iopub.status.busy": "2022-06-07T09:10:44.872869Z",
     "iopub.status.idle": "2022-06-07T09:10:48.012254Z",
     "shell.execute_reply": "2022-06-07T09:10:48.011427Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-06-07 09:10:45.785846: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-06-07 09:10:45.785878: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import ci_niter\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94be11a3",
   "metadata": {},
   "source": [
    "The monitoring functionality lives in `gpflow.monitor`.\n",
    "For now, we import `ModelToTensorBoard`, `ImageToTensorBoard`, `ScalarToTensorBoard` monitoring tasks and `MonitorTaskGroup` and `Monitor`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "28d207fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:48.015697Z",
     "iopub.status.busy": "2022-06-07T09:10:48.015076Z",
     "iopub.status.idle": "2022-06-07T09:10:48.018773Z",
     "shell.execute_reply": "2022-06-07T09:10:48.018048Z"
    }
   },
   "outputs": [],
   "source": [
    "from gpflow.monitor import (\n",
    "    ImageToTensorBoard,\n",
    "    ModelToTensorBoard,\n",
    "    Monitor,\n",
    "    MonitorTaskGroup,\n",
    "    ScalarToTensorBoard,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a2fce91",
   "metadata": {},
   "source": [
    "## Set up data and model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "253d7bd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:48.021710Z",
     "iopub.status.busy": "2022-06-07T09:10:48.021367Z",
     "iopub.status.idle": "2022-06-07T09:10:48.024957Z",
     "shell.execute_reply": "2022-06-07T09:10:48.024373Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define some configuration constants.\n",
    "\n",
    "num_data = 100\n",
    "noise_std = 0.1\n",
    "optimisation_steps = ci_niter(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "35d60928",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:48.027256Z",
     "iopub.status.busy": "2022-06-07T09:10:48.027002Z",
     "iopub.status.idle": "2022-06-07T09:10:48.124648Z",
     "shell.execute_reply": "2022-06-07T09:10:48.124066Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f658f155c00>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dummy data.\n",
    "\n",
    "X = np.random.randn(num_data, 1)  # [N, 2]\n",
    "Y = np.sin(X) + 0.5 * np.cos(X) + np.random.randn(*X.shape) * noise_std  # [N, 1]\n",
    "plt.plot(X, Y, \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6b4ca2c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:48.129011Z",
     "iopub.status.busy": "2022-06-07T09:10:48.128713Z",
     "iopub.status.idle": "2022-06-07T09:10:48.178752Z",
     "shell.execute_reply": "2022-06-07T09:10:48.178143Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-06-07 09:10:48.131043: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-06-07 09:10:48.131077: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-06-07 09:10:48.131097: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (2f63633ef0ff): /proc/driver/nvidia/version does not exist\n",
      "2022-06-07 09:10:48.131357: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "&lt;gpflow.models.gpr.GPR object at 0x7f658f1b62f0&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value               </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)   </td><td>float64</td><td>[1. 2.]             </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0                 </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.009999999999999998</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<gpflow.models.gpr.GPR object at 0x7f658f1b62f0>\n",
       "╒════════════════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤══════════════════════╕\n",
       "│ name                               │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │ value                │\n",
       "╞════════════════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪══════════════════════╡\n",
       "│ GPR.kernel.kernels[0].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[0].lengthscales │ Parameter │ Softplus         │         │ True        │ (2,)    │ float64 │ [1. 2.]              │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.kernel.kernels[1].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0                  │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼──────────────────────┤\n",
       "│ GPR.likelihood.variance            │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.009999999999999998 │\n",
       "╘════════════════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧══════════════════════╛"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up model and print\n",
    "\n",
    "kernel = gpflow.kernels.SquaredExponential(lengthscales=[1.0, 2.0]) + gpflow.kernels.Linear()\n",
    "model = gpflow.models.GPR((X, Y), kernel, noise_variance=noise_std ** 2)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "31dd9a33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:48.181394Z",
     "iopub.status.busy": "2022-06-07T09:10:48.181105Z",
     "iopub.status.idle": "2022-06-07T09:10:48.331919Z",
     "shell.execute_reply": "2022-06-07T09:10:48.331024Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We define a function that plots the model's prediction (in the form of samples) together with the data.\n",
    "# Importantly, this function has no other argument than `fig: matplotlib.figure.Figure` and `ax: matplotlib.figure.Axes`.\n",
    "\n",
    "\n",
    "def plot_prediction(fig, ax):\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100).reshape(-1, 1)\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=20)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C1\", alpha=0.2)\n",
    "    ax.plot(X, Y, \"o\")\n",
    "\n",
    "\n",
    "# Let's check if the function does the desired plotting\n",
    "fig = plt.figure()\n",
    "ax = fig.subplots()\n",
    "plot_prediction(fig, ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3df4aa9e",
   "metadata": {},
   "source": [
    "## Set up monitoring tasks\n",
    "\n",
    "We now define the `MonitorTask`s that will be executed during the optimisation.\n",
    "For this tutorial we set up three tasks:\n",
    "- `ModelToTensorBoard`: writes the models hyper-parameters such as `likelihood.variance` and `kernel.lengthscales` to a TensorBoard.\n",
    "- `ImageToTensorBoard`: writes custom matplotlib images to a TensorBoard.\n",
    "- `ScalarToTensorBoard`: writes any scalar value to a TensorBoard. Here, we use it to write the model's training objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "df27d8b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:48.335131Z",
     "iopub.status.busy": "2022-06-07T09:10:48.334783Z",
     "iopub.status.idle": "2022-06-07T09:10:48.354653Z",
     "shell.execute_reply": "2022-06-07T09:10:48.354045Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs\"  # Directory where TensorBoard files will be written.\n",
    "model_task = ModelToTensorBoard(log_dir, model)\n",
    "image_task = ImageToTensorBoard(log_dir, plot_prediction, \"image_samples\")\n",
    "lml_task = ScalarToTensorBoard(log_dir, lambda: model.training_loss(), \"training_objective\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18970425",
   "metadata": {},
   "source": [
    "We now group the tasks in a set of fast and slow tasks and pass them to the monitor.\n",
    "This allows us to execute the groups at a different frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ac80d4ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:48.357959Z",
     "iopub.status.busy": "2022-06-07T09:10:48.357680Z",
     "iopub.status.idle": "2022-06-07T09:10:48.361113Z",
     "shell.execute_reply": "2022-06-07T09:10:48.360613Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Plotting tasks can be quite slow. We want to run them less frequently.\n",
    "# We group them in a `MonitorTaskGroup` and set the period to 5.\n",
    "slow_tasks = MonitorTaskGroup(image_task, period=5)\n",
    "\n",
    "# The other tasks are fast. We run them at each iteration of the optimisation.\n",
    "fast_tasks = MonitorTaskGroup([model_task, lml_task], period=1)\n",
    "\n",
    "# Both groups are passed to the monitor.\n",
    "# `slow_tasks` will be run five times less frequently than `fast_tasks`.\n",
    "monitor = Monitor(fast_tasks, slow_tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "54ba2740",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:48.363620Z",
     "iopub.status.busy": "2022-06-07T09:10:48.363371Z",
     "iopub.status.idle": "2022-06-07T09:10:57.058781Z",
     "shell.execute_reply": "2022-06-07T09:10:57.057898Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-06-07 09:10:48.368079: W tensorflow/python/util/util.cc:368] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.\n"
     ]
    }
   ],
   "source": [
    "training_loss = model.training_loss_closure(\n",
    "    compile=True\n",
    ")  # compile=True (default): compiles using tf.function\n",
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "for step in range(optimisation_steps):\n",
    "    opt.minimize(training_loss, model.trainable_variables)\n",
    "    monitor(step)  # <-- run the monitoring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94c61e2a",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "TensorBoard is accessible through the browser, after launching the server by running `tensorboard --logdir ${logdir}`.\n",
    "See the [TensorFlow documentation on TensorBoard](https://www.tensorflow.org/tensorboard/get_started) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b9eb61d",
   "metadata": {},
   "source": [
    "### For optimal performance, we can also wrap the monitor call inside `tf.function`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "900f9062",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:57.109941Z",
     "iopub.status.busy": "2022-06-07T09:10:57.109530Z",
     "iopub.status.idle": "2022-06-07T09:10:57.115408Z",
     "shell.execute_reply": "2022-06-07T09:10:57.114792Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "log_dir_compiled = f\"{log_dir}/compiled\"\n",
    "model_task = ModelToTensorBoard(log_dir_compiled, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_compiled, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "# Note that the `ImageToTensorBoard` task cannot be compiled, and is omitted from the monitoring\n",
    "monitor = Monitor(MonitorTaskGroup([model_task, lml_task]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56fc46dd",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In the optimisation loop below we use `tf.range` (rather than Python's built-in range) to avoid re-tracing the `step` function each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "741078c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:57.118466Z",
     "iopub.status.busy": "2022-06-07T09:10:57.118114Z",
     "iopub.status.idle": "2022-06-07T09:10:59.333472Z",
     "shell.execute_reply": "2022-06-07T09:10:59.332828Z"
    }
   },
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def step(i):\n",
    "    opt.minimize(model.training_loss, model.trainable_variables)\n",
    "    monitor(i)\n",
    "\n",
    "\n",
    "# Notice the tf.range\n",
    "for i in tf.range(optimisation_steps):\n",
    "    step(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93043133",
   "metadata": {},
   "source": [
    "When opening TensorBoard, you may need to use the command `tensorboard --logdir . --reload_multifile=true`, as multiple `FileWriter` objects are used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbedbfeb",
   "metadata": {},
   "source": [
    "### Scipy Optimization monitoring\n",
    "\n",
    "Note that if you want to use the `Scipy` optimizer provided by GPflow, and want to monitor the training progress, then you need to simply replace\n",
    "the optimization loop with a single call to its `minimize` method and pass in the monitor as a `step_callback` keyword argument:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "76668e9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:59.340001Z",
     "iopub.status.busy": "2022-06-07T09:10:59.339652Z",
     "iopub.status.idle": "2022-06-07T09:10:59.356658Z",
     "shell.execute_reply": "2022-06-07T09:10:59.355978Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "\n",
    "log_dir_scipy = f\"{log_dir}/scipy\"\n",
    "model_task = ModelToTensorBoard(log_dir_scipy, model)\n",
    "lml_task = ScalarToTensorBoard(log_dir_scipy, lambda: model.training_loss(), \"training_objective\")\n",
    "image_task = ImageToTensorBoard(log_dir_scipy, plot_prediction, \"image_samples\")\n",
    "\n",
    "monitor = Monitor(\n",
    "    MonitorTaskGroup([model_task, lml_task], period=1), MonitorTaskGroup(image_task, period=5)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "113aa739",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-07T09:10:59.360341Z",
     "iopub.status.busy": "2022-06-07T09:10:59.360034Z",
     "iopub.status.idle": "2022-06-07T09:11:01.252292Z",
     "shell.execute_reply": "2022-06-07T09:11:01.251651Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: -69.68099880889753\n",
       " hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-2.96735825e-04, -4.30340661e-04,  3.97830673e-04,  2.26009904e-06,\n",
       "        4.29147152e-04])\n",
       "  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
       "     nfev: 37\n",
       "      nit: 28\n",
       "     njev: 37\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  2.07005977,   1.74612938,   0.18194306, -15.21875411,\n",
       "        -4.53840856])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt.minimize(training_loss, model.trainable_variables, step_callback=monitor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a37f5753",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
